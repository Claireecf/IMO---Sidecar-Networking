version: '3.8'
services:

  couchdb:
    build:
      context: .
      dockerfile: Dockerfile-couchdb
    image: couchdb:latest
    volumes:
      - ./couchdb/:/tmp/
      # - ./couchdb/local.ini:/opt/couchdb/etc/local.d/local.ini
    environment:
      - "COUCHDB_USER=imo"
      - "COUCHDB_PASSWORD=123456"
    ports:
      - "5984:5984"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5984/_up"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  envoy-controller:
    image: envoy_controller:20240114
    depends_on:
      couchdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s
    volumes:
      - ./controller/controller.crt:/controller/controller.crt
      - ./controller/controller.key:/controller/controller.key
    ports:
      - "18000:18000"
      - "19000:19000"
    command:
      - "-dbUserName=imo"
      - -dbHost=couchdb
      - "-updateTime=10s"
      - "-dbPort=5984"
      - "-dbPassword=123456"
      - "-dbName=users"
    networks:
      - app-network

  # envoy-client:
  #   image: envoyproxy/envoy:v1.19.1
  #   depends_on:
  #     - envoy-controller
  #     - couchdb
  #   volumes:
  #     - ./envoy-dynamic/envoy-client/controller.crt:/etc/envoy/controller.crt
  #     - ./envoy-dynamic/envoy-client/envoy.yaml:/etc/envoy/envoy.yaml
  #     - ./envoy-dynamic/envoy-client/cert.pem:/etc/envoy/cert.pem
  #     - ./envoy-dynamic/envoy-client/key.pem:/etc/envoy/key.pem
  #   ports:
  #     - "9901:9901"
  #     - "10000:10000/tcp"
  #     # - "10000:10000/udp"
  #   networks:
  #     - app-network

  # envoy-server:
  #   image: envoyproxy/envoy:v1.19.1
  #   depends_on:
  #     - envoy-controller
  #     - couchdb
  #   volumes:
  #     - ./envoy-dynamic/envoy-server/controller.crt:/etc/envoy/controller.crt
  #     - ./envoy-dynamic/envoy-server/envoy.yaml:/etc/envoy/envoy.yaml
  #     - ./envoy-dynamic/envoy-server/cert.pem:/etc/envoy/cert.pem
  #     - ./envoy-dynamic/envoy-server/key.pem:/etc/envoy/key.pem
  #   ports:
  #     - "9001:9001"
  #     - "18080:18080/tcp"
  #     # - "18080:18080/udp"
  #   networks:
  #     - app-network

  envoy-client:
    image: envoyproxy/envoy:v1.19.1
    volumes:
      - ./envoy-static/envoy-client/envoy.yaml:/etc/envoy/envoy.yaml
      - ./envoy-static/envoy-client/cert.pem:/etc/envoy/cert.pem
      - ./envoy-static/envoy-client/key.pem:/etc/envoy/key.pem
    ports:
      - "9901:9901"
      - "10000:10000/tcp"
      # - "10000:10000/udp"
    networks:
      - app-network

  envoy-server:
    image: envoyproxy/envoy:v1.19.1
    volumes:
      - ./envoy-static/envoy-server/envoy.yaml:/etc/envoy/envoy.yaml
      - ./envoy-static/envoy-server/cert.pem:/etc/envoy/cert.pem
      - ./envoy-static/envoy-server/key.pem:/etc/envoy/key.pem
    ports:
      - "9001:9001"
      - "18080:18080/tcp"
      # - "18080:18080/udp"
    networks:
      - app-network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/cert.pem:/etc/nginx/cert.pem
      - ./nginx/key.pem:/etc/nginx/key.pem
    ports:
      - "443:443"
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

  ubuntu-curl:
    build:
      context: .
      dockerfile: Dockerfile-curl
    image: ubuntu-curl:latest
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  couchdb_data:
  grafana_data:

